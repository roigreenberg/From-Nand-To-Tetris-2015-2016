// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {

    field Array strArr;
    field int strMaxSize;
    field int strSize;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {

        let strMaxSize = maxLength;
        let strArr = Array.new(strMaxSize);
        let strSize = 0;

        return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {

        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this String. */
    method int length() {
        return strSize;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
        return strArr[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {

        let strArr[j] = c;
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
let     strArr[strSize] = c;
        let strSize = strSize + 1;
       /* var int tmpSize;
        let tmpSize = strSize + 1;
        if (~(tmpSize = strMaxSize)){
            let strArr[strSize] = c;
            let strSize = strSize + 1;

        }*/

        return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {

        if (strSize > 0){
            let strSize = strSize - 1;
        }
        return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
        
        var int digVal;
        var boolean isNeg;
        var int index;

        //check if negative
        if (strSize > 0){
            if (strArr[0] = 45){
                let isNeg = true;
                let index = 1;
            }
            let isNeg = false;
            let index = 0;
        }
        
        while ((index < strSize) & (String.isNumericChar(strArr[index]))){
            let digVal = (10 * digVal) + (String.digitValOfChar(strArr[index]));
            let index = index + 1;
        }

        if (~(isNeg)){
            return digVal;
        }

        return -digVal;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
        var int divByTen;
        var int modulu;
        var int length, i, j;
        var boolean neg;
        var char digAsChar, tmp;


        let strSize = 0;
        let length = 0;
        let neg = false;

        if (number = 0){
            do appendChar(48);
            return;
        }

        if (number < 0){
            let number = -number;
            do appendChar(45);
            let neg = true;
        }



        while (number > 0) {
            let length = length  + 1;
            let modulu = Math.mod(number,10) ;
            let digAsChar = String.digitInAscii(modulu);
            do appendChar(digAsChar);
            let number = number / 10;
        }

        let i = strSize - length;
        let j = strSize - 1;
        while ( i < j ) {
            let tmp = strArr[i];
            let strArr[i] = strArr[j];
            let strArr[j] = tmp;
            let i = i + 1;
            let j = j - 1;

        }


        return;
    }


    method void recursiveSetInt(int number){

        var int divByTen;
        var int modulu;
        var char digAsChar;

        while (number > 0) {

            let modulu = Math.mod(number,10) ;
            let digAsChar = String.digitInAscii(modulu);
            do appendChar(digAsChar);
            let number = number / 10;

        }
       /* let divByTen = number / 10;
        let modulu = Math.mod(number,10) ;
        let digAsChar = String.digitInAscii(modulu);

        if (number < 10){
            do appendChar(digAsChar); 
        } else {
            do recursiveSetInt(divByTen);
            do appendChar(digAsChar);
        }*/
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    function boolean isNumericChar(char digChar){
        if (~(digChar < 48)){
            if (~(digChar > 57)){
                return true;
            }
            return false;
        }
        return false;
    }

    function int digitValOfChar(char digChar){
        return (digChar - 48);
    }

    function char digitInAscii(int dig){
        return (48 + dig);
    }

}
